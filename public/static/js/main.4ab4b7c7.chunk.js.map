{"version":3,"sources":["Component/Navigation/Top.tsx","Component/Navigation/Left.tsx","Component/Page/Home.tsx","Component/Page/Pet/List.tsx","Component/Form/TextInput.tsx","Denormalizer/InvalidParameterByNameDenormalizer.ts","Component/Form/PetForm.tsx","Component/Page/Pet/Create.tsx","Component/Page/Pet/Read.tsx","Component/Page/Pet/Edit.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Top","useState","displayMenu","setDisplayMenu","toggleMenu","className","to","onClick","id","Home","List","history","useHistory","location","useLocation","query","qs","parse","search","substr","page","parseInt","offset","sort","useEffect","fetchPetList","petList","setPetList","badRequest","setBadRequest","pages","Math","ceil","count","limit","a","fetch","stringify","method","headers","response","json","responseBody","status","deletePet","changePage","e","data","console","log","activePage","push","role","invalidParameters","map","invalidParameter","i","key","name","reason","Button","as","Link","Pagination","defaultActivePage","totalPages","onPageChange","undefined","_embedded","items","pet","format","Date","createdAt","locale","de","updatedAt","TextInput","input","rest","meta","type","InvalidParameterByNameDenormalizer","errorsByFields","forEach","hasOwnProperty","PetForm","unprocessableEntity","setUnprocessableEntity","submitPet","url","body","JSON","invalidParameterByNameDenormalized","onSubmit","initialValues","mutators","arrayMutators","render","handleSubmit","form","Form","Field","component","fields","remove","submit","Create","Read","match","fetchPet","setPet","notFound","setNotFound","params","detail","Item","Header","vaccinations","vaccination","Edit","App","Left","path","exact","PetList","PetCreate","PetRead","PetEdit","Boolean","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gPAoCeA,MAjCf,WAAgB,IAAD,EAC2BC,oBAAkB,GAD7C,mBACJC,EADI,KACSC,EADT,KAGLC,EAAa,WACfD,GAAgBD,IAGpB,OACI,6BACI,yBAAKG,UAAU,uCACX,yBAAKA,UAAU,+CACX,kBAAC,IAAD,CAASC,GAAG,IAAID,UAAU,eAA1B,cAGR,yBAAKA,UAAU,8BACX,yBAAKA,UAAU,+CACX,kBAAC,IAAD,CAASC,GAAG,IAAID,UAAU,eAA1B,YACA,yBAAKA,UAAU,cACX,yBAAKA,UAAU,QACX,4BAAQA,UAAU,uCAAuCE,QAASH,GAC9D,uBAAGC,UAAU,oBAIzB,yBAAKA,UAAW,8CAAgDH,EAAc,WAAa,KACvF,kBAAC,IAAD,CAASI,GAAG,OAAOC,QAASH,EAAYC,UAAU,QAAlD,YCfTL,MAVf,WACI,OACI,yBAAKQ,GAAG,UAAUH,UAAU,0DACxB,yBAAKA,UAAU,0CACX,kBAAC,IAAD,CAASC,GAAG,OAAOD,UAAU,QAA7B,UCKDI,MAVf,WACI,OACI,0BAAMJ,UAAU,kBACZ,yBAAKA,UAAU,OACX,wBAAIA,UAAU,2BAAd,W,8FC+HDK,MA1Hf,WAEI,IAAMC,EAAUC,cACVC,EAAWC,cAEXC,EAAQC,IAAGC,MAAMJ,EAASK,OAAOC,OAAO,IAExCC,EAAOC,SAASN,EAAMK,KAAOL,EAAMK,KAAO,KAC1CE,EAAiB,GAAPF,EAAa,GACvBG,EAAOR,EAAMQ,KAAOR,EAAMQ,KAAO,GAEvCC,qBAAU,WACNC,MACD,CAACZ,EAASK,SAbD,MAekBjB,qBAflB,mBAeLyB,EAfK,KAeIC,EAfJ,OAgBwB1B,qBAhBxB,mBAgBL2B,EAhBK,KAgBOC,EAhBP,KAkBNC,EAAQC,KAAKC,KAAKN,EAAUA,EAAQO,MAAQP,EAAQQ,MAAQ,GAE5DT,EAAY,uCAAG,8BAAAU,EAAA,sEACMC,MAAM,oCAAsCpB,IAAGqB,UAAU,CAAEH,MAAO,GAAIZ,OAAQA,EAAQC,KAAMA,IAAS,CACxHe,OAAQ,MACRC,QAAS,CACL,OAAU,sBAJD,cACXC,EADW,gBAQUA,EAASC,OARnB,UAQXC,EARW,OAUO,MAApBF,EAASG,OAVI,uBAWbhB,EAAWe,GAXE,0BAgBO,MAApBF,EAASG,QACTd,EAAca,GAjBD,4CAAH,qDAqBZE,EAAS,uCAAG,WAAOpC,GAAP,SAAA2B,EAAA,sEACRC,MAAM,oCAAD,OAAqC5B,GAAM,CAClD8B,OAAQ,WAFE,uBAKRb,IALQ,2CAAH,sDAQToB,EAAa,SAACC,EAAQC,GACxBC,QAAQC,IAAIF,EAAKG,YAEjBvC,EAAQwC,KAAK,QAAUnC,IAAGqB,UAAH,eAAkBtB,EAAlB,CAAyBK,KAAM2B,EAAKG,gBAG/D,OAAItB,EAEI,0BAAMwB,KAAK,OAAO/C,UAAU,sCACxB,yBAAKA,UAAU,2GACX,wBAAIA,UAAU,MAAd,aAEHuB,EAAWyB,kBAAkBC,KAAI,SAACC,EAAoCC,GAArC,OAC9B,yBAAKC,IAAKD,EAAGnD,UAAU,+BAA+BkD,EAAiBG,KAAvE,KAA+EH,EAAiBI,YAM3GjC,EAOD,0BAAMrB,UAAU,kBACZ,yBAAKA,UAAU,OACX,wBAAIA,UAAU,2BAAd,aAEJ,yBAAKA,UAAU,OACX,kBAACuD,EAAA,EAAD,CAAQC,GAAIC,IAAMxD,GAAG,cAAcD,UAAU,SAA7C,WAEJ,yBAAKA,UAAU,OACX,kBAAC0D,EAAA,EAAD,CAAYC,kBAAmB5C,EAAM6C,WAAYnC,EAAOoC,aAAcrB,IACtE,2BAAOxC,UAAU,2CACb,+BACI,4BACI,kCACA,yCACA,yCACA,qCAEI,kBAAC,IAAD,CAAMC,GAAI,QAAUU,IAAGqB,UAAH,eAAkBtB,EAAlB,CAAyBQ,KAAK,eAAMA,EAAP,CAAamC,KAAM,YAApE,SAFJ,KAGI,kBAAC,IAAD,CAAMpD,GAAI,QAAUU,IAAGqB,UAAH,eAAkBtB,EAAlB,CAAyBQ,KAAK,eAAMA,EAAP,CAAamC,KAAM,aAApE,SAHJ,KAII,kBAAC,IAAD,CAAMpD,GAAI,QAAUU,IAAGqB,UAAH,eAAkBtB,EAAlB,CAAyBQ,KAAK,eAAMA,EAAP,CAAamC,UAAMS,QAApE,SAJJ,KAOA,yCAGR,+BACKzC,EAAQ0C,UAAUC,MAAMf,KAAI,SAACgB,GAAD,OACzB,wBAAIb,IAAKa,EAAI9D,IACT,4BAAK8D,EAAI9D,IACT,4BAAK+D,YAAOC,KAAKvD,MAAMqD,EAAIG,WAAY,wBAAyB,CAAEC,OAAQC,OAC1E,4BAAKL,EAAIM,WAAaL,YAAOC,KAAKvD,MAAMqD,EAAIM,WAAY,wBAAyB,CAAEF,OAAQC,OAC3F,4BAAKL,EAAIZ,MACT,4BACI,kBAACE,EAAA,EAAD,CAAQC,GAAIC,IAAMxD,GAAE,eAAUgE,EAAI9D,KAAlC,QACA,kBAACoD,EAAA,EAAD,CAAQC,GAAIC,IAAMxD,GAAE,eAAUgE,EAAI9D,GAAd,UAApB,QACA,kBAACoD,EAAA,EAAD,CAAQrD,QAAS,WAAQqC,EAAU0B,EAAI9D,KAAOH,UAAU,OAAxD,iBAMpB,kBAAC0D,EAAA,EAAD,CAAYC,kBAAmB5C,EAAM6C,WAAYnC,EAAOoC,aAAcrB,MA9C1E,0BAAMO,KAAK,OAAO/C,UAAU,wC,mCCxEzBwE,EAJoB,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAgBC,GAAnB,EAAUC,KAAV,wCACjC,yCAAOC,KAAK,QAAWH,EAAWC,KCarBG,MAjBf,SAA4C7B,GACxC,IAAKA,EACD,MAAO,GAGX,IAAM8B,EAA6D,GASnE,OARA9B,EAAkB+B,SAAQ,SAAC7B,GAClB4B,EAAeE,eAAe9B,EAAiBG,QAChDyB,EAAe5B,EAAiBG,MAAQ,IAG5CyB,EAAe5B,EAAiBG,MAAMP,KAAKI,MAGxC4B,G,SC8FIG,MA7Ff,YAAsC,IAAnBhB,EAAkB,EAAlBA,IAET3D,EAAUC,cAFiB,EAIqBX,qBAJrB,mBAI1BsF,EAJ0B,KAILC,EAJK,KAM3BC,EAAS,uCAAG,WAAOnB,GAAP,mBAAAnC,EAAA,6DACRuD,EAAMpB,EAAI9D,GAAJ,2CAA6C8D,EAAI9D,IAAO,mCADtD,SAGS4B,MAAMsD,EAAK,CAC9BpD,OAAQgC,EAAI9D,GAAK,MAAQ,OACzB+B,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBoD,KAAMC,KAAKvD,UAAUiC,KATX,cAGR9B,EAHQ,gBAYaA,EAASC,OAZtB,UAYRC,EAZQ,OAcVF,EAASG,UAAY2B,EAAI9D,GAAK,IAAM,KAd1B,wBAeVG,EAAQwC,KAAK,QAfH,2BAoBU,MAApBX,EAASG,QACT6C,EAAuB9C,GArBb,4CAAH,sDAyBTmD,EAAqCX,EAAkC,OAACK,QAAD,IAACA,OAAD,EAACA,EAAqBlC,mBAEnG,OACI,kBAAC,IAAD,CACIyC,SAAUL,EACVM,cAAezB,EACf0B,SAAQ,eACDC,KAEPC,OAAQ,gBACJC,EADI,EACJA,aAEgBhD,EAHZ,EAEJiD,KACIJ,SAAY7C,KAEhBiD,EALI,EAKJA,KALI,OAOA,kBAACC,EAAA,EAAD,CAAMP,SAAUK,GACZ,kBAACE,EAAA,EAAKC,MAAN,KACI,uCACA,kBAAC,IAAD,CACI5C,KAAK,OACLrD,UAAW,iBAAmBwF,EAAmCnC,MAAQ,eACzE6C,UAAW1B,IAEdgB,EAAmCnC,MAAQmC,EAAmCnC,KAAKJ,KAAI,SAACC,EAAoCC,GAArC,OACpF,yBAAKC,IAAKD,EAAGnD,UAAU,+BAA+BkD,EAAiBI,YAG/E,kBAAC0C,EAAA,EAAKC,MAAN,KACI,8CACA,kBAAC,IAAD,CAAqB5C,KAAK,iBACrB,gBAAG8C,EAAH,EAAGA,OAAH,OACGA,EAAOlD,KAAI,SAACI,EAAcF,GAAf,OACP,yBAAKC,IAAKD,EAAGnD,UAAU,8BACnB,kBAACgG,EAAA,EAAKC,MAAN,KACI,uCACA,kBAAC,IAAD,CACI5C,KAAI,UAAKA,EAAL,SACJrD,UAAW,iBAAmBwF,EAAmC,GAAD,OAAInC,EAAJ,WAAoB,eACpF6C,UAAW1B,IAEdgB,EAAmC,GAAD,OAAInC,EAAJ,WAAoBmC,EAAmC,GAAD,OAAInC,EAAJ,UAAiBJ,KAAI,SAACC,EAAoCC,GAArC,OAC1G,yBAAKC,IAAKD,EAAGnD,UAAU,+BAA+BkD,EAAiBI,YAG/E,kBAAC0C,EAAA,EAAKC,MAAN,KACI,4BAAQrB,KAAK,SAAS5E,UAAU,gBAAgBE,QAAS,kBAAMiG,EAAOC,OAAOjD,KAA7E,kBAMpB,4BAAQyB,KAAK,SAAS5E,UAAU,kBAAkBE,QAAS,kBAAM4C,EAAK,oBAAgBgB,KAAtF,QAEJ,kBAACP,EAAA,EAAD,CAAQrD,QAAS6F,EAAKM,OAAQrG,UAAU,QAAxC,UACA,kBAACuD,EAAA,EAAD,CAAQC,GAAIC,IAAMxD,GAAG,QAArB,aCrFTqG,MAff,WACI,OACI,0BAAMtG,UAAU,kBACZ,yBAAKA,UAAU,OACX,wBAAIA,UAAU,2BAAd,eAEJ,yBAAKA,UAAU,OACX,yBAAKA,UAAU,2BACX,kBAAC,EAAD,U,SCgFLuG,MAjFf,YAAwD,IAAxCC,EAAuC,EAAvCA,MAEZrF,qBAAU,WACNsF,MACD,IAJgD,MAM7B7G,qBAN6B,mBAM5CqE,EAN4C,KAMvCyC,EANuC,OAOnB9G,qBAPmB,mBAO5C+G,EAP4C,KAOlCC,EAPkC,KAS7CH,EAAQ,uCAAG,8BAAA3E,EAAA,sEACUC,MAAM,oCAAD,OAAqCyE,EAAMK,OAAO1G,IAAM,CAChF8B,OAAQ,MACRC,QAAS,CACL,OAAU,sBAJL,cACPC,EADO,gBAQcA,EAASC,OARvB,OAQPC,EARO,OAUW,MAApBF,EAASG,QACToE,EAAOrE,GAGa,MAApBF,EAASG,QACTsE,EAAYvE,GAfH,2CAAH,qDAmBd,OAAIsE,EAEI,0BAAM3G,UAAU,kBACZ,yBAAKA,UAAU,OACX,wBAAIA,UAAU,2BAAd,uBACA,8BAAO2G,EAASG,UAM3B7C,EAOD,0BAAMjE,UAAU,kBACZ,yBAAKA,UAAU,OACX,wBAAIA,UAAU,2BAAd,aAEJ,yBAAKA,UAAU,OACX,kBAAC,IAAD,KACI,kBAAC,IAAK+G,KAAN,KACI,kBAAC,IAAKC,OAAN,WACC/C,EAAI9D,IAET,kBAAC,IAAK4G,KAAN,KACI,kBAAC,IAAKC,OAAN,kBACC9C,YAAOC,KAAKvD,MAAMqD,EAAIG,WAAY,wBAAyB,CAAEC,OAAQC,OAE1E,kBAAC,IAAKyC,KAAN,KACI,kBAAC,IAAKC,OAAN,kBACC/C,EAAIM,WAAaL,YAAOC,KAAKvD,MAAMqD,EAAIM,WAAY,wBAAyB,CAAEF,OAAQC,OAE3F,kBAAC,IAAKyC,KAAN,KACI,kBAAC,IAAKC,OAAN,aACC/C,EAAIZ,MAET,kBAAC,IAAK0D,KAAN,KACI,kBAAC,IAAKC,OAAN,qBACA,4BAAK/C,EAAIgD,aAAahE,KAAI,SAACiE,EAAa/D,GAAd,OAAqB,wBAAIC,IAAKD,GAAI+D,EAAY7D,aAIpF,yBAAKrD,UAAU,OACX,kBAACuD,EAAA,EAAD,CAAQC,GAAIC,IAAMxD,GAAG,QAArB,UAlCJ,0BAAMD,UAAU,oBCgBbmH,MA3Df,YAAwD,IAAxCX,EAAuC,EAAvCA,MAEZrF,qBAAU,WACNsF,MACD,IAJgD,MAM7B7G,qBAN6B,mBAM5CqE,EAN4C,KAMvCyC,EANuC,OAOnB9G,qBAPmB,mBAO5C+G,EAP4C,KAOlCC,EAPkC,KAS7CH,EAAQ,uCAAG,8BAAA3E,EAAA,sEACUC,MAAM,oCAAD,OAAqCyE,EAAMK,OAAO1G,IAAM,CAChF8B,OAAQ,MACRC,QAAS,CACL,OAAU,sBAJL,cACPC,EADO,gBAQcA,EAASC,OARvB,OAQPC,EARO,OAUW,MAApBF,EAASG,QACToE,EAAOrE,GAGa,MAApBF,EAASG,QACTsE,EAAYvE,GAfH,2CAAH,qDAmBd,OAAIsE,EAEI,0BAAM3G,UAAU,kBACZ,yBAAKA,UAAU,OACX,wBAAIA,UAAU,2BAAd,uBACA,8BAAO2G,EAASG,UAM3B7C,EAOD,0BAAMjE,UAAU,kBACZ,yBAAKA,UAAU,OACX,wBAAIA,UAAU,2BAAd,aAEJ,yBAAKA,UAAU,OACX,yBAAKA,UAAU,2BACX,kBAAC,EAAD,CAASiE,IAAKA,OAXtB,0BAAMjE,UAAU,oBChBboH,MAvBf,WACI,OACI,kBAAC,IAAD,KACI,kBAAC,EAAD,MACA,yBAAKpH,UAAU,kBACX,kBAACqH,EAAD,MACA,yBACIrH,UAAU,uFACVG,GAAG,WAEH,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOmH,KAAK,IAAIC,OAAK,EAACrB,UAAW9F,IACjC,kBAAC,IAAD,CAAOkH,KAAK,OAAOC,OAAK,EAACrB,UAAWsB,IACpC,kBAAC,IAAD,CAAOF,KAAK,cAAcC,OAAK,EAACrB,UAAWuB,IAC3C,kBAAC,IAAD,CAAOH,KAAK,WAAWC,OAAK,EAACrB,UAAWwB,IACxC,kBAAC,IAAD,CAAOJ,KAAK,gBAAgBC,OAAK,EAACrB,UAAWyB,SCbjDC,QACW,cAA7BC,OAAOrH,SAASsH,UAEa,UAA7BD,OAAOrH,SAASsH,UAEhBD,OAAOrH,SAASsH,SAAStB,MACvB,2DCXJuB,IAASlC,OAAO,kBAAC,EAAD,MAASmC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9F,QAAQ8F,MAAMA,EAAMC,c","file":"static/js/main.4ab4b7c7.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { NavLink } from 'react-router-dom';\n\nfunction Top() {\n    const [displayMenu, setDisplayMenu] = useState<boolean>(false);\n\n    const toggleMenu = () => {\n        setDisplayMenu(!displayMenu);\n    };\n\n    return (\n        <nav>\n            <div className='ui tablet computer only padded grid'>\n                <div className='ui inverted borderless top fixed fluid menu'>\n                    <NavLink to='/' className='header item'>Petstore</NavLink>\n                </div>\n            </div>\n            <div className='ui mobile only padded grid'>\n                <div className='ui top fixed borderless fluid inverted menu'>\n                    <NavLink to='/' className='header item'>Petstore</NavLink>\n                    <div className='right menu'>\n                        <div className='item'>\n                            <button className='ui icon toggle basic inverted button' onClick={toggleMenu}>\n                                <i className='content icon'></i>\n                            </button>\n                        </div>\n                    </div>\n                    <div className={'ui vertical borderless inverted fluid menu' + (displayMenu ? ' visible' : '')}>\n                        <NavLink to='/pet' onClick={toggleMenu} className='item'>Pet</NavLink>\n                    </div>\n                </div>\n            </div>\n        </nav>\n    );\n}\n\nexport default Top;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nfunction Top() {\n    return (\n        <nav id='sidebar' className='three wide tablet only three wide computer only column'>\n            <div className='ui vertical borderless fluid text menu'>\n                <NavLink to='/pet' className='item'>Pet</NavLink>\n            </div>\n        </nav>\n    );\n}\n\nexport default Top;\n\n","import React from 'react';\n\nfunction Home() {\n    return (\n        <main className=\"ui padded grid\">\n            <div className=\"row\">\n                <h1 className=\"ui huge dividing header\">Home</h1>\n            </div>\n        </main>\n    );\n}\n\nexport default Home;\n","import React, { useState, useEffect } from 'react';\nimport { Link, useHistory, useLocation } from 'react-router-dom';\nimport { format } from 'date-fns';\nimport { de } from 'date-fns/locale'\nimport qs from 'qs';\nimport PetList from '../../../Type/Pet/PetList';\nimport Pet from '../../../Type/Pet/Pet';\nimport BadRequest from '../../../Type/Error/BadRequest';\nimport InvalidParameter from '../../../Type/Error/InvalidParameter';\nimport { Button, Pagination, PaginationProps } from 'semantic-ui-react';\n\nfunction List() {\n\n    const history = useHistory();\n    const location = useLocation();\n\n    const query = qs.parse(location.search.substr(1));\n\n    const page = parseInt(query.page ? query.page : '1');\n    const offset = (page * 10) - 10;\n    const sort = query.sort ? query.sort : {};\n\n    useEffect(() => {\n        fetchPetList();\n    }, [location.search]);\n\n    const [petList, setPetList] = useState<PetList>();\n    const [badRequest, setBadRequest] = useState<BadRequest>();\n\n    const pages = Math.ceil(petList ? petList.count / petList.limit : 1);\n\n    const fetchPetList = async () => {\n        const response = await fetch('https://localhost:10443/api/pets?' + qs.stringify({ limit: 10, offset: offset, sort: sort }), {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json'\n            }\n        });\n\n        const responseBody = await response.json();\n\n        if (response.status === 200) {\n            setPetList(responseBody);\n\n            return;\n        }\n\n        if (response.status === 400) {\n            setBadRequest(responseBody);\n        }\n    };\n\n    const deletePet = async (id: string) => {\n        await fetch(`https://localhost:10443/api/pets/${id}`, {\n            method: 'DELETE'\n        });\n\n        await fetchPetList();\n    };\n\n    const changePage = (e: any, data: PaginationProps) => {\n        console.log(data.activePage);\n\n        history.push('/pet?' + qs.stringify({ ...query, page: data.activePage }));\n    };\n\n    if (badRequest) {\n        return (\n            <main role='main' className='col-md-9 ml-sm-auto col-lg-10 px-4'>\n                <div className='d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom'>\n                    <h1 className='h2'>List Pet</h1>\n                </div>\n                {badRequest.invalidParameters.map((invalidParameter: InvalidParameter, i) => (\n                    <div key={i} className=\"ui pointing red basic label\">{invalidParameter.name}: {invalidParameter.reason}</div>\n                ))}\n            </main>\n        );\n    }\n\n    if (!petList) {\n        return (\n            <main role='main' className='col-md-9 ml-sm-auto col-lg-10 px-4'></main>\n        );\n    }\n\n    return (\n        <main className=\"ui padded grid\">\n            <div className=\"row\">\n                <h1 className=\"ui huge dividing header\">Pet List</h1>\n            </div>\n            <div className=\"row\">\n                <Button as={Link} to='/pet/create' className='green'>Create</Button>\n            </div>\n            <div className=\"row\">\n                <Pagination defaultActivePage={page} totalPages={pages} onPageChange={changePage} />\n                <table className=\"ui single line striped selectable table\">\n                    <thead>\n                        <tr>\n                            <th>Id</th>\n                            <th>CreatedAt</th>\n                            <th>UpdatedAt</th>\n                            <th>\n                                Name (\n                                <Link to={'/pet?' + qs.stringify({ ...query, sort: { ...sort, name: 'asc' } })}> A-Z </Link> |\n                                <Link to={'/pet?' + qs.stringify({ ...query, sort: { ...sort, name: 'desc' } })}> Z-A </Link> |\n                                <Link to={'/pet?' + qs.stringify({ ...query, sort: { ...sort, name: undefined } })}> --- </Link>\n                                )\n                            </th>\n                            <th>Actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {petList._embedded.items.map((pet: Pet) => (\n                            <tr key={pet.id}>\n                                <td>{pet.id}</td>\n                                <td>{format(Date.parse(pet.createdAt), 'dd.MM.yyyy - HH:mm:ss', { locale: de })}</td>\n                                <td>{pet.updatedAt && format(Date.parse(pet.updatedAt), 'dd.MM.yyyy - HH:mm:ss', { locale: de })}</td>\n                                <td>{pet.name}</td>\n                                <td>\n                                    <Button as={Link} to={`/pet/${pet.id}`}>Read</Button>\n                                    <Button as={Link} to={`/pet/${pet.id}/edit`}>Edit</Button>\n                                    <Button onClick={() => { deletePet(pet.id) }} className='red'>Delete</Button>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n                <Pagination defaultActivePage={page} totalPages={pages} onPageChange={changePage} />\n            </div>\n        </main>\n    );\n}\n\nexport default List;\n","import React from 'react';\nimport { FieldRenderProps } from 'react-final-form';\n\ntype Props = FieldRenderProps<string, any>;\n\nconst TextInput: React.FC<Props> = ({ input, meta, ...rest }: Props) => (\n  <input type='text' {...input} {...rest} />\n);\n\nexport default TextInput;\n","import InvalidParameter from '../Type/Error/InvalidParameter';\n\nfunction InvalidParameterByNameDenormalizer(invalidParameters?: Array<InvalidParameter>) {\n    if (!invalidParameters) {\n        return {};\n    }\n\n    const errorsByFields: { [id: string]: Array<InvalidParameter>; } = {};\n    invalidParameters.forEach((invalidParameter: InvalidParameter) => {\n        if (!errorsByFields.hasOwnProperty(invalidParameter.name)) {\n            errorsByFields[invalidParameter.name] = [];\n        }\n\n        errorsByFields[invalidParameter.name].push(invalidParameter);\n    });\n\n    return errorsByFields;\n};\n\nexport default InvalidParameterByNameDenormalizer;\n","import React, { useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Form as FinalForm, Field as FinalFormField } from 'react-final-form';\nimport arrayMutators from 'final-form-arrays';\nimport { FieldArray as FinalFormFieldArray } from 'react-final-form-arrays'\nimport TextInput from './TextInput';\nimport Pet from '../../Type/Pet/Pet';\nimport UnprocessableEntity from '../../Type/Error/UnprocessableEntity';\nimport InvalidParameter from '../../Type/Error/InvalidParameter';\nimport FieldArrayRenderProps from '../../Type/Form/FieldArrayRenderProps';\nimport InvalidParameterByNameDenormalizer from '../../Denormalizer/InvalidParameterByNameDenormalizer';\nimport { Button, Form } from 'semantic-ui-react';\n\ninterface FormProps {\n    pet?: Pet;\n};\n\nfunction PetForm({ pet }: FormProps) {\n\n    const history = useHistory();\n\n    const [unprocessableEntity, setUnprocessableEntity] = useState<UnprocessableEntity>();\n\n    const submitPet = async (pet: Pet) => {\n        const url = pet.id ? `https://localhost:10443/api/pets/${pet.id}` : 'https://localhost:10443/api/pets';\n\n        const response = await fetch(url, {\n            method: pet.id ? 'PUT' : 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(pet)\n        });\n\n        const responseBody = await response.json();\n\n        if (response.status === (pet.id ? 200 : 201)) {\n            history.push('/pet');\n\n            return;\n        }\n\n        if (response.status === 422) {\n            setUnprocessableEntity(responseBody);\n        }\n    };\n\n    const invalidParameterByNameDenormalized = InvalidParameterByNameDenormalizer(unprocessableEntity?.invalidParameters);\n\n    return (\n        <FinalForm\n            onSubmit={submitPet}\n            initialValues={pet}\n            mutators={{\n                ...arrayMutators\n            }}\n            render={({\n                handleSubmit,\n                form: {\n                    mutators: { push }\n                },\n                form\n            }) => (\n                    <Form onSubmit={handleSubmit}>\n                        <Form.Field>\n                            <label>Name</label>\n                            <FinalFormField<string>\n                                name='name'\n                                className={'form-control ' + (invalidParameterByNameDenormalized.name && ' is-invalid')}\n                                component={TextInput}\n                            />\n                            {invalidParameterByNameDenormalized.name && invalidParameterByNameDenormalized.name.map((invalidParameter: InvalidParameter, i) => (\n                                <div key={i} className=\"ui pointing red basic label\">{invalidParameter.reason}</div>\n                            ))}\n                        </Form.Field>\n                        <Form.Field>\n                            <label>Vaccination</label>\n                            <FinalFormFieldArray name='vaccinations'>\n                                {({ fields }: FieldArrayRenderProps) =>\n                                    fields.map((name: string, i: number) => (\n                                        <div key={i} className=\"ui bottom attached segment\">\n                                            <Form.Field>\n                                                <label>Name</label>\n                                                <FinalFormField\n                                                    name={`${name}.name`}\n                                                    className={'form-control ' + (invalidParameterByNameDenormalized[`${name}.name`] && ' is-invalid')}\n                                                    component={TextInput}\n                                                />\n                                                {invalidParameterByNameDenormalized[`${name}.name`] && invalidParameterByNameDenormalized[`${name}.name`].map((invalidParameter: InvalidParameter, i) => (\n                                                    <div key={i} className=\"ui pointing red basic label\">{invalidParameter.reason}</div>\n                                                ))}\n                                            </Form.Field>\n                                            <Form.Field>\n                                                <button type='button' className='ui button red' onClick={() => fields.remove(i)}>Remove</button>\n                                            </Form.Field>\n                                        </div>\n                                    ))\n                                }\n                            </FinalFormFieldArray>\n                            <button type='button' className='ui button green' onClick={() => push('vaccinations', undefined)}>Add</button>\n                        </Form.Field>\n                        <Button onClick={form.submit} className='blue'>Submit</Button>\n                        <Button as={Link} to='/pet'>List</Button>\n                    </Form>\n                )}\n        />\n    );\n}\n\nexport default PetForm;\n","import React from 'react';\nimport PetForm from '../../Form/PetForm';\n\nfunction Create() {\n    return (\n        <main className=\"ui padded grid\">\n            <div className=\"row\">\n                <h1 className=\"ui huge dividing header\">Create Pet</h1>\n            </div>\n            <div className=\"row\">\n                <div className=\"ui top attached segment\">\n                    <PetForm />\n                </div>\n            </div>\n        </main>\n    );\n}\n\nexport default Create;\n","import React, { useState, useEffect } from 'react';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport Pet from '../../../Type/Pet/Pet';\nimport { format } from 'date-fns';\nimport { de } from 'date-fns/locale'\nimport NotFound from '../../../Type/Error/NotFound';\nimport { Button, List } from 'semantic-ui-react';\n\ntype TParams = { id: string };\n\nfunction Read({ match }: RouteComponentProps<TParams>) {\n\n    useEffect(() => {\n        fetchPet();\n    }, []);\n\n    const [pet, setPet] = useState<Pet>();\n    const [notFound, setNotFound] = useState<NotFound>();\n\n    const fetchPet = async () => {\n        const response = await fetch(`https://localhost:10443/api/pets/${match.params.id}`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json'\n            }\n        });\n\n        const responseBody = await response.json();\n\n        if (response.status === 200) {\n            setPet(responseBody);\n        }\n\n        if (response.status === 404) {\n            setNotFound(responseBody);\n        }\n    };\n\n    if (notFound) {\n        return (\n            <main className='ui padded grid'>\n                <div className='row'>\n                    <h1 className='ui huge dividing header'>Read Pet: Not Found</h1>\n                    <span>{notFound.detail}</span>\n                </div>\n            </main>\n        );\n    }\n\n    if (!pet) {\n        return (\n            <main className='ui padded grid'></main>\n        );\n    }\n\n    return (\n        <main className='ui padded grid'>\n            <div className='row'>\n                <h1 className='ui huge dividing header'>Read Pet</h1>\n            </div>\n            <div className='row'>\n                <List>\n                    <List.Item>\n                        <List.Header>Id</List.Header>\n                        {pet.id}\n                    </List.Item>\n                    <List.Item>\n                        <List.Header>CreatedAt</List.Header>\n                        {format(Date.parse(pet.createdAt), 'dd.MM.yyyy - HH:mm:ss', { locale: de })}\n                    </List.Item>\n                    <List.Item>\n                        <List.Header>UpdatedAt</List.Header>\n                        {pet.updatedAt && format(Date.parse(pet.updatedAt), 'dd.MM.yyyy - HH:mm:ss', { locale: de })}\n                    </List.Item>\n                    <List.Item>\n                        <List.Header>Name</List.Header>\n                        {pet.name}\n                    </List.Item>\n                    <List.Item>\n                        <List.Header>Vaccinations</List.Header>\n                        <ul>{pet.vaccinations.map((vaccination, i) => (<li key={i}>{vaccination.name}</li>))}</ul>\n                    </List.Item>\n                </List>\n            </div>\n            <div className='row'>\n                <Button as={Link} to='/pet'>List</Button>\n            </div>\n        </main>\n    );\n}\n\nexport default Read;\n","import React, { useState, useEffect } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport Pet from '../../../Type/Pet/Pet';\nimport PetForm from '../../Form/PetForm';\nimport NotFound from '../../../Type/Error/NotFound';\n\ntype TParams = { id: string };\n\nfunction Edit({ match }: RouteComponentProps<TParams>) {\n\n    useEffect(() => {\n        fetchPet();\n    }, []);\n\n    const [pet, setPet] = useState<Pet>();\n    const [notFound, setNotFound] = useState<NotFound>();\n\n    const fetchPet = async () => {\n        const response = await fetch(`https://localhost:10443/api/pets/${match.params.id}`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json'\n            }\n        });\n\n        const responseBody = await response.json();\n\n        if (response.status === 200) {\n            setPet(responseBody);\n        }\n\n        if (response.status === 404) {\n            setNotFound(responseBody);\n        }\n    };\n\n    if (notFound) {\n        return (\n            <main className='ui padded grid'>\n                <div className='row'>\n                    <h1 className='ui huge dividing header'>Read Pet: Not Found</h1>\n                    <span>{notFound.detail}</span>\n                </div>\n            </main>\n        );\n    }\n\n    if (!pet) {\n        return (\n            <main className='ui padded grid'></main>\n        );\n    }\n\n    return (\n        <main className=\"ui padded grid\">\n            <div className=\"row\">\n                <h1 className=\"ui huge dividing header\">Edit Pet</h1>\n            </div>\n            <div className=\"row\">\n                <div className=\"ui top attached segment\">\n                    <PetForm pet={pet} />\n                </div>\n            </div>\n        </main>\n    );\n}\n\nexport default Edit;\n\n","import React from 'react';\nimport Top from './Component/Navigation/Top';\nimport Left from './Component/Navigation/Left';\nimport Home from './Component/Page/Home';\nimport PetList from './Component/Page/Pet/List';\nimport PetCreate from './Component/Page/Pet/Create';\nimport PetRead from './Component/Page/Pet/Read';\nimport PetEdit from './Component/Page/Pet/Edit';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nfunction App() {\n    return (\n        <Router>\n            <Top />\n            <div className='ui padded grid'>\n                <Left />\n                <div\n                    className='sixteen wide mobile thirteen wide tablet thirteen wide computer right floated column'\n                    id='content'\n                >\n                    <Switch>\n                        <Route path='/' exact component={Home} />\n                        <Route path='/pet' exact component={PetList} />\n                        <Route path='/pet/create' exact component={PetCreate} />\n                        <Route path='/pet/:id' exact component={PetRead} />\n                        <Route path='/pet/:id/edit' exact component={PetEdit} />\n                    </Switch>\n                </div>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // 'Content is cached for offline use.' message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}